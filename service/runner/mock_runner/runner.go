// Code generated by MockGen. DO NOT EDIT.
// Source: service/runner/runner.go

// Package mock_runner is a generated GoMock package.
package mock_runner

import (
	context "context"
	github "github.com/duck8823/minimal-ci/service/github"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRunner is a mock_runner of Runner interface
type MockRunner struct {
	ctrl     *gomock.Controller
	recorder *MockRunnerMockRecorder
}

// MockRunnerMockRecorder is the mock_runner recorder for MockRunner
type MockRunnerMockRecorder struct {
	mock *MockRunner
}

// NewMockRunner creates a new mock_runner instance
func NewMockRunner(ctrl *gomock.Controller) *MockRunner {
	mock := &MockRunner{ctrl: ctrl}
	mock.recorder = &MockRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRunner) EXPECT() *MockRunnerMockRecorder {
	return m.recorder
}

// RunWithPullRequest mocks base method
func (m *MockRunner) RunWithPullRequest(ctx context.Context, repo github.Repository, num int, command ...string) error {
	varargs := []interface{}{ctx, repo, num}
	for _, a := range command {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunWithPullRequest", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunWithPullRequest indicates an expected call of RunWithPullRequest
func (mr *MockRunnerMockRecorder) RunWithPullRequest(ctx, repo, num interface{}, command ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, repo, num}, command...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunWithPullRequest", reflect.TypeOf((*MockRunner)(nil).RunWithPullRequest), varargs...)
}

// Run mocks base method
func (m *MockRunner) Run(ctx context.Context, repo github.Repository, ref string, command ...string) error {
	varargs := []interface{}{ctx, repo, ref}
	for _, a := range command {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Run", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run
func (mr *MockRunnerMockRecorder) Run(ctx, repo, ref interface{}, command ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, repo, ref}, command...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockRunner)(nil).Run), varargs...)
}
