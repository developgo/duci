// Code generated by MockGen. DO NOT EDIT.
// Source: service/github/github.go

// Package mock_github is a generated GoMock package.
package mock_github

import (
	context "github.com/duck8823/minimal-ci/infrastructure/context"
	github "github.com/duck8823/minimal-ci/service/github"
	gomock "github.com/golang/mock/gomock"
	github0 "github.com/google/go-github/github"
	plumbing "gopkg.in/src-d/go-git.v4/plumbing"
	reflect "reflect"
)

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// GetFullName mocks base method
func (m *MockRepository) GetFullName() string {
	ret := m.ctrl.Call(m, "GetFullName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetFullName indicates an expected call of GetFullName
func (mr *MockRepositoryMockRecorder) GetFullName() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFullName", reflect.TypeOf((*MockRepository)(nil).GetFullName))
}

// GetSSHURL mocks base method
func (m *MockRepository) GetSSHURL() string {
	ret := m.ctrl.Call(m, "GetSSHURL")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetSSHURL indicates an expected call of GetSSHURL
func (mr *MockRepositoryMockRecorder) GetSSHURL() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSSHURL", reflect.TypeOf((*MockRepository)(nil).GetSSHURL))
}

// MockService is a mock of Service interface
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// GetPullRequest mocks base method
func (m *MockService) GetPullRequest(ctx context.Context, repository github.Repository, num int) (*github0.PullRequest, error) {
	ret := m.ctrl.Call(m, "GetPullRequest", ctx, repository, num)
	ret0, _ := ret[0].(*github0.PullRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPullRequest indicates an expected call of GetPullRequest
func (mr *MockServiceMockRecorder) GetPullRequest(ctx, repository, num interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPullRequest", reflect.TypeOf((*MockService)(nil).GetPullRequest), ctx, repository, num)
}

// CreateCommitStatus mocks base method
func (m *MockService) CreateCommitStatus(ctx context.Context, repo github.Repository, hash plumbing.Hash, state github.State) {
	m.ctrl.Call(m, "CreateCommitStatus", ctx, repo, hash, state)
}

// CreateCommitStatus indicates an expected call of CreateCommitStatus
func (mr *MockServiceMockRecorder) CreateCommitStatus(ctx, repo, hash, state interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCommitStatus", reflect.TypeOf((*MockService)(nil).CreateCommitStatus), ctx, repo, hash, state)
}

// CreateCommitStatusWithError mocks base method
func (m *MockService) CreateCommitStatusWithError(ctx context.Context, repo github.Repository, hash plumbing.Hash, err error) {
	m.ctrl.Call(m, "CreateCommitStatusWithError", ctx, repo, hash, err)
}

// CreateCommitStatusWithError indicates an expected call of CreateCommitStatusWithError
func (mr *MockServiceMockRecorder) CreateCommitStatusWithError(ctx, repo, hash, err interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCommitStatusWithError", reflect.TypeOf((*MockService)(nil).CreateCommitStatusWithError), ctx, repo, hash, err)
}

// Clone mocks base method
func (m *MockService) Clone(ctx context.Context, dir string, repo github.Repository, ref string) (plumbing.Hash, error) {
	ret := m.ctrl.Call(m, "Clone", ctx, dir, repo, ref)
	ret0, _ := ret[0].(plumbing.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Clone indicates an expected call of Clone
func (mr *MockServiceMockRecorder) Clone(ctx, dir, repo, ref interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockService)(nil).Clone), ctx, dir, repo, ref)
}
