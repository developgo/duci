// Code generated by MockGen. DO NOT EDIT.
// Source: service/github/github.go

// Package mock_github is a generated GoMock package.
package mock_github

import (
	github "github.com/duck8823/duci/application/service/github"
	context "github.com/duck8823/duci/infrastructure/context"
	gomock "github.com/golang/mock/gomock"
	plumbing "gopkg.in/src-d/go-git.v4/plumbing"
	reflect "reflect"
)

// MockService is a mock of Service interface
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// GetPullRequest mocks base method
func (m *MockService) GetPullRequest(ctx context.Context, repository github.Repository, num int) (*github.PullRequest, error) {
	ret := m.ctrl.Call(m, "GetPullRequest", ctx, repository, num)
	ret0, _ := ret[0].(*github.PullRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPullRequest indicates an expected call of GetPullRequest
func (mr *MockServiceMockRecorder) GetPullRequest(ctx, repository, num interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPullRequest", reflect.TypeOf((*MockService)(nil).GetPullRequest), ctx, repository, num)
}

// CreateCommitStatus mocks base method
func (m *MockService) CreateCommitStatus(ctx context.Context, repo github.Repository, hash plumbing.Hash, state github.State, description string) error {
	ret := m.ctrl.Call(m, "CreateCommitStatus", ctx, repo, hash, state, description)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCommitStatus indicates an expected call of CreateCommitStatus
func (mr *MockServiceMockRecorder) CreateCommitStatus(ctx, repo, hash, state, description interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCommitStatus", reflect.TypeOf((*MockService)(nil).CreateCommitStatus), ctx, repo, hash, state, description)
}
