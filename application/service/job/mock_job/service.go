// Code generated by MockGen. DO NOT EDIT.
// Source: application/service/job/service.go

// Package mock_job_service is a generated GoMock package.
package mock_job_service

import (
	job "github.com/duck8823/duci/domain/model/job"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockService is a mock of Service interface
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// FindBy mocks base method
func (m *MockService) FindBy(id job.ID) (*job.Job, error) {
	ret := m.ctrl.Call(m, "FindBy", id)
	ret0, _ := ret[0].(*job.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBy indicates an expected call of FindBy
func (mr *MockServiceMockRecorder) FindBy(id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBy", reflect.TypeOf((*MockService)(nil).FindBy), id)
}

// Start mocks base method
func (m *MockService) Start(id job.ID) error {
	ret := m.ctrl.Call(m, "Start", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start
func (mr *MockServiceMockRecorder) Start(id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockService)(nil).Start), id)
}

// Append mocks base method
func (m *MockService) Append(id job.ID, line job.LogLine) error {
	ret := m.ctrl.Call(m, "Append", id, line)
	ret0, _ := ret[0].(error)
	return ret0
}

// Append indicates an expected call of Append
func (mr *MockServiceMockRecorder) Append(id, line interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Append", reflect.TypeOf((*MockService)(nil).Append), id, line)
}

// Finish mocks base method
func (m *MockService) Finish(id job.ID) error {
	ret := m.ctrl.Call(m, "Finish", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Finish indicates an expected call of Finish
func (mr *MockServiceMockRecorder) Finish(id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Finish", reflect.TypeOf((*MockService)(nil).Finish), id)
}
