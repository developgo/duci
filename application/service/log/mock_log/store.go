// Code generated by MockGen. DO NOT EDIT.
// Source: application/service/log/store.go

// Package mock_log is a generated GoMock package.
package mock_log

import (
	log "github.com/duck8823/duci/application/service/log"
	model "github.com/duck8823/duci/domain/model"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	reflect "reflect"
)

// MockStoreService is a mock of StoreService interface
type MockStoreService struct {
	ctrl     *gomock.Controller
	recorder *MockStoreServiceMockRecorder
}

// MockStoreServiceMockRecorder is the mock recorder for MockStoreService
type MockStoreServiceMockRecorder struct {
	mock *MockStoreService
}

// NewMockStoreService creates a new mock instance
func NewMockStoreService(ctrl *gomock.Controller) *MockStoreService {
	mock := &MockStoreService{ctrl: ctrl}
	mock.recorder = &MockStoreServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStoreService) EXPECT() *MockStoreServiceMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockStoreService) Get(uuid uuid.UUID) (*model.Job, error) {
	ret := m.ctrl.Call(m, "Get", uuid)
	ret0, _ := ret[0].(*model.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockStoreServiceMockRecorder) Get(uuid interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockStoreService)(nil).Get), uuid)
}

// Append mocks base method
func (m *MockStoreService) Append(uuid uuid.UUID, level log.Level, message string) error {
	ret := m.ctrl.Call(m, "Append", uuid, level, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// Append indicates an expected call of Append
func (mr *MockStoreServiceMockRecorder) Append(uuid, level, message interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Append", reflect.TypeOf((*MockStoreService)(nil).Append), uuid, level, message)
}

// Finish mocks base method
func (m *MockStoreService) Finish(uuid uuid.UUID) error {
	ret := m.ctrl.Call(m, "Finish", uuid)
	ret0, _ := ret[0].(error)
	return ret0
}

// Finish indicates an expected call of Finish
func (mr *MockStoreServiceMockRecorder) Finish(uuid interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Finish", reflect.TypeOf((*MockStoreService)(nil).Finish), uuid)
}

// Close mocks base method
func (m *MockStoreService) Close() error {
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockStoreServiceMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStoreService)(nil).Close))
}
