// Code generated by MockGen. DO NOT EDIT.
// Source: infrastructure/job/third_pirty.go

// Package mock_job is a generated GoMock package.
package mock_job

import (
	gomock "github.com/golang/mock/gomock"
	opt "github.com/syndtr/goleveldb/leveldb/opt"
	reflect "reflect"
)

// MockLevelDB is a mock of LevelDB interface
type MockLevelDB struct {
	ctrl     *gomock.Controller
	recorder *MockLevelDBMockRecorder
}

// MockLevelDBMockRecorder is the mock recorder for MockLevelDB
type MockLevelDBMockRecorder struct {
	mock *MockLevelDB
}

// NewMockLevelDB creates a new mock instance
func NewMockLevelDB(ctrl *gomock.Controller) *MockLevelDB {
	mock := &MockLevelDB{ctrl: ctrl}
	mock.recorder = &MockLevelDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLevelDB) EXPECT() *MockLevelDBMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockLevelDB) Get(key []byte, ro *opt.ReadOptions) ([]byte, error) {
	ret := m.ctrl.Call(m, "Get", key, ro)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockLevelDBMockRecorder) Get(key, ro interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockLevelDB)(nil).Get), key, ro)
}

// Put mocks base method
func (m *MockLevelDB) Put(key, value []byte, wo *opt.WriteOptions) error {
	ret := m.ctrl.Call(m, "Put", key, value, wo)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put
func (mr *MockLevelDBMockRecorder) Put(key, value, wo interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockLevelDB)(nil).Put), key, value, wo)
}
