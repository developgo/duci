// Code generated by MockGen. DO NOT EDIT.
// Source: domain/model/job/target/git/git.go

// Package mock_git is a generated GoMock package.
package mock_git

import (
	context "context"
	git "github.com/duck8823/duci/domain/model/job/target/git"
	gomock "github.com/golang/mock/gomock"
	plumbing "gopkg.in/src-d/go-git.v4/plumbing"
	reflect "reflect"
)

// MockTargetSource is a mock of TargetSource interface
type MockTargetSource struct {
	ctrl     *gomock.Controller
	recorder *MockTargetSourceMockRecorder
}

// MockTargetSourceMockRecorder is the mock recorder for MockTargetSource
type MockTargetSourceMockRecorder struct {
	mock *MockTargetSource
}

// NewMockTargetSource creates a new mock instance
func NewMockTargetSource(ctrl *gomock.Controller) *MockTargetSource {
	mock := &MockTargetSource{ctrl: ctrl}
	mock.recorder = &MockTargetSourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTargetSource) EXPECT() *MockTargetSourceMockRecorder {
	return m.recorder
}

// GetSSHURL mocks base method
func (m *MockTargetSource) GetSSHURL() string {
	ret := m.ctrl.Call(m, "GetSSHURL")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetSSHURL indicates an expected call of GetSSHURL
func (mr *MockTargetSourceMockRecorder) GetSSHURL() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSSHURL", reflect.TypeOf((*MockTargetSource)(nil).GetSSHURL))
}

// GetCloneURL mocks base method
func (m *MockTargetSource) GetCloneURL() string {
	ret := m.ctrl.Call(m, "GetCloneURL")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetCloneURL indicates an expected call of GetCloneURL
func (mr *MockTargetSourceMockRecorder) GetCloneURL() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCloneURL", reflect.TypeOf((*MockTargetSource)(nil).GetCloneURL))
}

// GetRef mocks base method
func (m *MockTargetSource) GetRef() string {
	ret := m.ctrl.Call(m, "GetRef")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetRef indicates an expected call of GetRef
func (mr *MockTargetSourceMockRecorder) GetRef() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRef", reflect.TypeOf((*MockTargetSource)(nil).GetRef))
}

// GetSHA mocks base method
func (m *MockTargetSource) GetSHA() plumbing.Hash {
	ret := m.ctrl.Call(m, "GetSHA")
	ret0, _ := ret[0].(plumbing.Hash)
	return ret0
}

// GetSHA indicates an expected call of GetSHA
func (mr *MockTargetSourceMockRecorder) GetSHA() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSHA", reflect.TypeOf((*MockTargetSource)(nil).GetSHA))
}

// MockGit is a mock of Git interface
type MockGit struct {
	ctrl     *gomock.Controller
	recorder *MockGitMockRecorder
}

// MockGitMockRecorder is the mock recorder for MockGit
type MockGitMockRecorder struct {
	mock *MockGit
}

// NewMockGit creates a new mock instance
func NewMockGit(ctrl *gomock.Controller) *MockGit {
	mock := &MockGit{ctrl: ctrl}
	mock.recorder = &MockGitMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGit) EXPECT() *MockGitMockRecorder {
	return m.recorder
}

// Clone mocks base method
func (m *MockGit) Clone(ctx context.Context, dir string, src git.TargetSource) error {
	ret := m.ctrl.Call(m, "Clone", ctx, dir, src)
	ret0, _ := ret[0].(error)
	return ret0
}

// Clone indicates an expected call of Clone
func (mr *MockGitMockRecorder) Clone(ctx, dir, src interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockGit)(nil).Clone), ctx, dir, src)
}
