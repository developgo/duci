// Code generated by MockGen. DO NOT EDIT.
// Source: domain/model/job/target/github/github.go

// Package mock_github is a generated GoMock package.
package mock_github

import (
	context "context"
	github "github.com/duck8823/duci/domain/model/job/target/github"
	gomock "github.com/golang/mock/gomock"
	github0 "github.com/google/go-github/github"
	reflect "reflect"
)

// MockGitHub is a mock of GitHub interface
type MockGitHub struct {
	ctrl     *gomock.Controller
	recorder *MockGitHubMockRecorder
}

// MockGitHubMockRecorder is the mock recorder for MockGitHub
type MockGitHubMockRecorder struct {
	mock *MockGitHub
}

// NewMockGitHub creates a new mock instance
func NewMockGitHub(ctrl *gomock.Controller) *MockGitHub {
	mock := &MockGitHub{ctrl: ctrl}
	mock.recorder = &MockGitHubMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGitHub) EXPECT() *MockGitHubMockRecorder {
	return m.recorder
}

// GetPullRequest mocks base method
func (m *MockGitHub) GetPullRequest(ctx context.Context, repo github.Repository, num int) (*github0.PullRequest, error) {
	ret := m.ctrl.Call(m, "GetPullRequest", ctx, repo, num)
	ret0, _ := ret[0].(*github0.PullRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPullRequest indicates an expected call of GetPullRequest
func (mr *MockGitHubMockRecorder) GetPullRequest(ctx, repo, num interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPullRequest", reflect.TypeOf((*MockGitHub)(nil).GetPullRequest), ctx, repo, num)
}

// CreateCommitStatus mocks base method
func (m *MockGitHub) CreateCommitStatus(ctx context.Context, status github.CommitStatus) error {
	ret := m.ctrl.Call(m, "CreateCommitStatus", ctx, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCommitStatus indicates an expected call of CreateCommitStatus
func (mr *MockGitHubMockRecorder) CreateCommitStatus(ctx, status interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCommitStatus", reflect.TypeOf((*MockGitHub)(nil).CreateCommitStatus), ctx, status)
}
